// Generated by CoffeeScript 1.8.0
(function() {
  var crypto, id_from_text, text, weak_maps_and_object_ids;

  crypto = require('crypto');

  id_from_text = function(text, length, hash) {
    var R;
    if (hash == null) {
      hash = 'sha1';
    }

    /* Given a `text` and a `length`, return an ID with `length` hexadecimal digits (`[0-9a-f]`)—this is like
    `create_id`, but working on a text rather than a number of arbitrary values. The hash algorithm currently
    used is SHA-1, which returns 40 hex digits; it should be good enough for the task at hand and has the
    advantage of being widely implemented.
     */

    /* TAINT should be a user option, or take 'good' algorithm universally available */
    R = ((crypto.createHash(hash)).update(text, 'utf-8')).digest('hex');
    if (length != null) {
      return R.slice(0, length);
    } else {
      return R;
    }
  };

  text = (require('./permuted-index'))['text'];

  weak_maps_and_object_ids = function() {
    var ID, d, e, last_oid, oid_map, s, u;
    last_oid = 0;
    oid_map = new WeakMap();
    ID = {};
    ID._set = function(value, oid) {
      var R;
      if (oid == null) {
        oid = null;
      }
      if (oid == null) {
        oid = (last_oid += +1);
      }
      R = "o#" + oid;
      oid_map.set(value, R);
      return R;
    };
    ID.get = function(value) {
      var R, type;
      if (value === true) {
        return 'true';
      }
      if (value === false) {
        return 'false';
      }
      if (value === null) {
        return 'null';
      }
      if (value === null) {
        return 'undefined';
      }
      switch (type = CND.type_of(value)) {
        case 'jsnotanumber':
          return 'nan';
        case 'number':
          return "n#" + value;
        case 'text':
          return "t#" + (id_from_text(value, 12));
        case 'jsinfinity':
          return (value > 0 ? "+infinity" : "-infinity");
      }
      if ((R = oid_map.get(value)) != null) {
        return R;
      }
      return this._set(value);
    };
    debug('©cDOVp', CND.type_of(0 / 0));
    d = {};
    e = {};
    s = Symbol('foo');
    help(ID._set(d));
    help(ID.get(d));
    help('+++', ID.get(e));
    help('+++', ID.get('helo'));
    help('+++', ID.get(text));
    help('+++', ID.get(text.replace(/.$/, '?')));
    help('>>>', ID.get(42));
    help('>>>', ID.get(42));
    help('>>>', ID.get(1 / 0));
    help('>>>', ID.get(0 / 0));
    help('±±±', ID.get(s));
    help('±±±', ID.get(Infinity));
    help('±±±', ID.get(-Infinity));
    warn("running GC");
    gc();
    help('+++', ID.get(e));
    help('>>>', ID.get(42));
    help('>>>', ID.get(42));
    help('±±±', ID.get(s));
    return help('±±±', ID.get(u = Symbol('foo')));
  };

  weak_maps_and_object_ids();

}).call(this);

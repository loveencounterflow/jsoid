// Generated by CoffeeScript 1.9.0
(function() {
  var crypto, debug, help, id_from_text, is_number, is_string, new_jsoid, test, util;

  crypto = require('crypto');

  util = require('util');

  is_number = util.isNumber;

  is_string = util.isString;

  help = debug = console.log;

  id_from_text = function(text, length, hash) {
    var R;
    if (hash == null) {
      hash = 'sha1';
    }

    /* Given a `text` and a `length`, return an ID with `length` hexadecimal digits (`[0-9a-f]`)â€”this is like
    `create_id`, but working on a text rather than a number of arbitrary values. The hash algorithm currently
    used is SHA-1, which returns 40 hex digits; it should be good enough for the task at hand and has the
    advantage of being widely implemented.
     */

    /* TAINT should be a user option, or take 'good' algorithm universally available */
    R = ((crypto.createHash(hash)).update(text, 'utf-8')).digest('hex');
    if (length != null) {
      return R.slice(0, length);
    } else {
      return R;
    }
  };

  this.new_jsoid = new_jsoid = function(settings) {
    var R, last_oid, oid_map, set;
    if (settings != null) {
      throw new Error("settings not yet supported");
    }
    last_oid = -1;
    oid_map = new WeakMap();
    R = {};
    set = function(value) {
      R = "o#" + (last_oid += +1);
      oid_map.set(value, R);
      return R;
    };
    R = function(value) {
      if (value === true) {
        return 'true';
      }
      if (value === false) {
        return 'false';
      }
      if (value === null) {
        return 'null';
      }
      if (value === void 0) {
        return 'undefined';
      }
      if (is_number(value)) {

        /* `isNan is broken as per
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN;
        however, we already know that `value` tests `true` for `util.isNumber`, so using `isNan` here should
        be alright.
         */
        if (isNaN(value)) {
          return 'nan';
        }
        if (!isFinite(value)) {
          return (value > 0 ? "+infinity" : "-infinity");
        }
        return "n#" + value;
      }
      if (is_string(value)) {
        return "t#" + (id_from_text(value, 12));
      }
      if ((R = oid_map.get(value)) != null) {
        return R;
      }
      return set(value);
    };
    return R;
  };

  test = function() {
    var d, e, jsoid, s, u;
    jsoid = new_jsoid();
    d = {};
    e = {};
    s = Symbol('foo');
    if ((jsoid(d)) !== 'o#0') {
      throw new Error("test case #1 failed");
    }
    if ((jsoid(e)) !== 'o#1') {
      throw new Error("test case #2 failed");
    }
    if ((jsoid('helo')) !== 't#c6efaf27673d') {
      throw new Error("test case #3 failed");
    }
    if ((jsoid('helo!')) !== 't#8e95a23efc4e') {
      throw new Error("test case #4 failed");
    }
    if ((jsoid(42)) !== 'n#42') {
      throw new Error("test case #5 failed");
    }
    if ((jsoid(1e3)) !== 'n#1000') {
      throw new Error("test case #6 failed");
    }
    if ((jsoid(1e12)) !== 'n#1000000000000') {
      throw new Error("test case #7 failed");
    }
    if ((jsoid(42)) !== 'n#42') {
      throw new Error("test case #8 failed");
    }
    if ((jsoid(1 / 0)) !== '+infinity') {
      throw new Error("test case #9 failed");
    }
    if ((jsoid(0 / 0)) !== 'nan') {
      throw new Error("test case #10 failed");
    }
    if ((jsoid(s)) !== 'o#2') {
      throw new Error("test case #11 failed");
    }
    if ((jsoid(Infinity)) !== '+infinity') {
      throw new Error("test case #12 failed");
    }
    if ((jsoid(-Infinity)) !== '-infinity') {
      throw new Error("test case #13 failed");
    }
    if ((jsoid(e)) !== 'o#1') {
      throw new Error("test case #14 failed");
    }
    if ((jsoid(42)) !== 'n#42') {
      throw new Error("test case #15 failed");
    }
    if ((jsoid(42)) !== 'n#42') {
      throw new Error("test case #16 failed");
    }
    if ((jsoid(s)) !== 'o#2') {
      throw new Error("test case #17 failed");
    }
    if ((jsoid(u = Symbol('foo'))) !== 'o#3') {
      throw new Error("test case #18 failed");
    }
    if ((jsoid(void 0)) !== 'undefined') {
      throw new Error("test case #18 failed");
    }
  };

  if (module.parent == null) {
    test();
  }

}).call(this);
